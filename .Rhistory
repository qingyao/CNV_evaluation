message(paste("Processed CN segmentation for sample:",cid,"Chr:",chrname))
time <- time + system.time(seg1 <- segment(smoo1, min.width= minw, verbose=0, undo.splits = undosplit, undo.prune = undopr,undo.SD = undosd))[3]#
ss1 <- segments.summary(seg1)[c(1:4,6,5)]
write.table(ss1, file=fn, sep="\t", quote=FALSE,
append = T, row.names=FALSE, col.names=F)
cat(nrow(ss1),sum(segments.p(seg1)$pval < 0.1,na.rm = T),'',sep = '\t',file = logf,append = TRUE)
}
cat(time, '\n',file = logf,append = TRUE,sep = '')
}
for (undosplit in c("sdundo")){
for (minw in c( 5)){
for (smrg in c(5,10)){
for (smsd in c(1, 1.5, 2)) {
if (undosplit == "prune"){
for (undopr in c(0.05, 0.1)){
undosd <- NA
cat(minw, smrg, smsd, undosplit, undopr, undosd)
cnsegPerArray(workingdir,seriesName, cid, chrs, minw, smrg, smsd, undosplit, undopr, undosd)
}
}else {
for (undosd in c(1,2)){
undopr <- NA
cat(minw, smrg, smsd, undosplit, undopr, undosd)
cnsegPerArray(workingdir,seriesName, cid, chrs, minw, smrg, smsd, undosplit, undopr, undosd)
}
}
}
}
}
}
cnsegPerArray <- function(workingdir,seriesName, cid, chrs, minw, smrg, smsd, undosplit, undopr, undosd){
dir.create(file.path(workingdir,'processed',seriesName,cid), showWarnings = FALSE)
fn <- file.path(workingdir,'processed',seriesName,cid, sprintf('segments,cn,%s_%s_%s_%s_%s_%s.tsv',minw,smrg, smsd, undosplit, undopr,undosd))
cat("sample_id","chromosome","start", "end", "value", "probes\n",sep="\t",file=fn,append = F)
time <- 0 #
logf <- file.path(workingdir,'processed',seriesName,cid, 'log.txt')
cat(minw,smrg, smsd, undosplit, undopr,undosd,'',sep = '\t',file = logf,append = TRUE)
for (chrname in chrs){
data<- read.table(sprintf('/Volumes/arraymapMirror/arraymap/hg19/%s/%s/probes,cn,chr%d.tsv',seriesName,cid,chrname),header=T)
cna1 <- CNA(genomdat=data$VALUE,
chrom=rep(chrname, length(data$VALUE)),
maploc=data$BASEPOS,
data.type="logratio",
sampleid=cid)
time <- system.time(smoo1 <- smooth.CNA(cna1, smooth.region=smrg,smooth.SD.scale=smsd))[3]#
message(paste("Processed CN segmentation for sample:",cid,"Chr:",chrname))
time <- time + system.time(seg1 <- segment(smoo1, min.width= minw, verbose=0, undo.splits = undosplit, undo.prune = undopr,undo.SD = undosd))[3]#
ss1 <- segments.summary(seg1)[c(1:4,6,5)]
write.table(ss1, file=fn, sep="\t", quote=FALSE,
append = T, row.names=FALSE, col.names=F)
cat(nrow(ss1),sum(segments.p(seg1)$pval < 0.1,na.rm = T),'',sep = '\t',file = logf,append = TRUE)
}
cat(time, '\n',file = logf,append = TRUE,sep = '')
}
for (undosplit in c("sdundo")){
for (minw in c( 5)){
for (smrg in c(5,10)){
for (smsd in c(1, 1.5, 2)) {
if (undosplit == "prune"){
for (undopr in c(0.05, 0.1)){
undosd <- NA
cat(minw, smrg, smsd, undosplit, undopr, undosd)
cnsegPerArray(workingdir,seriesName, cid, chrs, minw, smrg, smsd, undosplit, undopr, undosd)
}
}else {
for (undosd in c(1,2)){
undopr <- NA
cat(minw, smrg, smsd, undosplit, undopr, undosd)
cnsegPerArray(workingdir,seriesName, cid, chrs, minw, smrg, smsd, undosplit, undopr, undosd)
}
}
}
}
}
}
a=0
while (a==0) {
for (i in 1:3){
print(i);a=i
}
}
a=0
for (i in 1:3){
while (a==0) {
print(i);a=i
}
}
if(1) print(1)
if(1 | 1) print(1)
if(1 | 0) print(1)
if(0 | 0) print(1)
library(readr)
苏黎世学联会员卡登记 <- read_csv("~/苏黎世学联会员卡登记.csv")
View(苏黎世学联会员卡登记)
suppressMessages(苏黎世学联会员卡登记 <- read_csv("~/苏黎世学联会员卡登记.csv"))
suppressMessages(abc <- read_csv("~/苏黎世学联会员卡登记.csv"))
rootdir <- '/Volumes/arraymapMirror/arraymap/hg19'
series <- list.files(rootdir)
series <- list.files(rootdir)
series <- series[grep('GSE',series)]
quality <- data.frame()
for (s in series) {
f <- file.path(rootdir,s,'CNARA_output.txt')
if (file.exists(f)){
stable <- read.table(f,header = T,sep = '\t')
quality <- rbind(quality, stable[,c(1,9,10)])
}
}
quality <- quality[!duplicated(quality$Sample),]
setwd('/Users/pgweb/arraydata/aroma/EvaluationPack')
ev_summ <- read.table('/output/sample_evaluation_summary.tsv',header = T,stringsAsFactors = F)
ev_summ <- read.table('output/sample_evaluation_summary.tsv',header = T,stringsAsFactors = F)
fyles<-list.files('output/')
fyles<- fyles[grep('minLambda',fyles)]
minlambda <- data.frame()
for (f in fyles) {
f <- file.path('output',f)
print(f)
stable <- read.table(f,sep = '\t',stringsAsFactors = F)
minlambda <- rbind(minlambda, stable)
}
sum(minlambda$V2%in%quality$Sample) #35867
minlambda$quality <- quality$Case_Diagnosis[match(minlambda$V2,quality$Sample)]
smallminlambda <- minlambda[minlambda$V3<=0.5,]
bigminlambda <- minlambda[minlambda$V3>0.5,]
plot(smallminlambda$min.lambda,smallminlambda$V4)
plot(bigminlambda$V3,log(bigminlambda$V4),col=bigminlambda$quality)
legend(2,9.3,unique(minlambda$quality),col=1:length(minlambda$quality),pch=1)
minlambda$quality <- quality$Case_Diagnosis[match(minlambda$V2,quality$Sample)]
smallminlambda <- minlambda[minlambda$V3<=0.5,]
bigminlambda <- minlambda[minlambda$V3>0.5,]
plot(bigminlambda$V3,log(bigminlambda$V4),col=bigminlambda$quality)
legend(2,9.3,unique(bigminlambda$quality),col=1:length(bigminlambda$quality),pch=1)
plot(bigminlambda$V3,log(bigminlambda$V4),col=bigminlambda$quality)
legend(2,9.3,unique(bigminlambda$quality),col=1:length(bigminlambda$quality),pch=1)
as.numeric(bigminlambda$quality)
legend(2,9.3,unique(bigminlambda$quality),col=(bigminlambda$quality),pch=1)
plot(bigminlambda$V3,log(bigminlambda$V4),col=bigminlambda$quality)
legend(2,9.3,unique(bigminlambda$quality),col=(bigminlambda$quality),pch=1)
plot(bigminlambda$V3,log(bigminlambda$V4),col=bigminlambda$quality)
legend(2,9.3,unique(bigminlambda$quality),col=unique(bigminlambda$quality),pch=1)
plot(log(minlambda$V3),log(minlambda$V4),col=minlambda$quality,ylab = 'log_noseg',xlab='minLambda')
legend(1,6.3,unique(minlambda$quality),col=1:length(minlambda$quality),pch=1)
unique(bigminlambda$quality)
as.numeric(unique(bigminlambda$quality))
as.numeric(bigminlambda$quality)
plot(log(minlambda$V3),log(minlambda$V4),col=minlambda$quality,ylab = 'log_noseg',xlab='minLambda')
legend(1,6.3,unique(minlambda$quality),col=1:length(minlambda$quality),pch=1)
legend(-20,6.3,unique(minlambda$quality),col=1:length(minlambda$quality),pch=1)
legend(-20,6.3,unique(minlambda$quality),col=unique(minlambda$quality),pch=1)
plot(minlambda$V3,log(minlambda$V4),col=minlambda$quality,ylab = 'log_noseg',xlab='minLambda')
legend(1,6.3,unique(minlambda$quality),col=unique(minlambda$quality),pch=1)
pdf('../output/MinLambdaAnalysis/overall_samples.pdf')
plot(minlambda$V3,log(minlambda$V4),col=minlambda$quality,ylab = 'log_noseg',xlab='minLambda')
legend(1,6.3,unique(minlambda$quality),col=unique(minlambda$quality),pch=1)
dev.off()
pdf('output/MinLambdaAnalysis/overall_samples.pdf')
plot(minlambda$V3,log(minlambda$V4),col=minlambda$quality,ylab = 'log_noseg',xlab='minLambda')
legend(1,6.3,unique(minlambda$quality),col=unique(minlambda$quality),pch=1)
dev.off()
pdf('output/MinLambdaAnalysis/overall_samples.pdf')
plot(log(minlambda$V3),log(minlambda$V4),col=minlambda$quality,ylab = 'log_noseg',xlab='minLambda')
dev.off()
pdf('output/MinLambdaAnalysis/big_samples.pdf')
plot(bigminlambda$V3,log(bigminlambda$V4),col=bigminlambda$quality)
legend(2,9.3,unique(bigminlambda$quality),col=unique(bigminlambda$quality),pch=1)
dev.off()
plot(smallminlambda$V3,log(smallminlambda$V4),col=smallminlambda$quality,ylab = 'log_noseg',xlab='minLambda')
hist(log(smallminlambda$V3)[as.numeric(smallminlambda$quality)==5])
colnames(smallminlambda)[3] <- 'min.lambda'
plot(smallminlambda$min.lambda,smallminlambda$V4)
smallminlambda$quality <- swr(smallminlambda$quality)
source('stepFilter/helper.R')
smallminlambda$quality <- swr(smallminlambda$quality)
ggplot(smallminlambda,aes(x=log(min.lambda)))+geom_histogram()+facet_wrap(~quality)
library(ggplot2)
ggplot(smallminlambda,aes(x=log(min.lambda)))+geom_histogram()+facet_wrap(~quality)
ggsave('../output/MinLambdaAnalysis/smalllambdasamples.pdf')
ggsave('output/MinLambdaAnalysis/smalllambdasamples.pdf')
colnames(bigminlambda)[3] <- 'min.lambda'
bigminlambda$quality <- swr(bigminlambda$quality)
ggplot(bigminlambda,aes(x=log(min.lambda)))+geom_histogram()+facet_wrap(~quality)
ggsave('../output/MinLambdaAnalysis/biglambdasamples.pdf')
ggsave('output/MinLambdaAnalysis/biglambdasamples.pdf')
unique(smallminlambda)
unique(smallminlambda$quality)
unique(minlambda$quality)
table(minlambda$quality)
sum(table(minlambda$quality))
boxplot(log(minlambda$V4),log(minlambda$V10))
lmd0.3 <- apply(minlambda,1,function(x){
if (x[10] != 0){
c(x[c(1,2,4)],0.3,x[10])
}else{
tmp <- 0.3/x[3]
idx <- which.min(abs(as.numeric(tmp)-c(1,2,10,100,1000))) ## idx that is closest to tmp
c(x[c(1,2,4)],x[3]*(c(1,2,10,100,1000)[idx]) ,x[idx+3])
}
})
lmd0.3 <- as.data.frame(t(lmd0.3))
lmd0.3$group <- cut(as.numeric(lmd0.3$V4),c(0,50,500,1000,2000,5000,10000))
class(lmd0.3)
apply(lmd0.3[,-6],2,function(x) as.character(x))
lmd0.3[,-6]apply(lmd0.3[,-6],2,function(x) as.character(x))
lmd0.3[,-6] <- apply(lmd0.3[,-6],2,function(x) as.character(x))
colnames(lmd0.3)[cols] <- c('series','array','originalsegments','lambda','newsegment')
cols <- c(6)
colnames(lmd0.3)[cols] <- c('series','array','originalsegments','lambda','newsegment')
colnames(lmd0.3)[-cols] <- c('series','array','originalsegments','lambda','newsegment')
colnames(lmd0.3)[6] = 'group'
library(reshape2)
mlmd <- melt(lmd0.3)
?melt
mlmd <- melt(lmd0.3,id.vars = c('series','array','lambda','group'))
mlmd$value <- as.numeric(mlmd$value)
ggplot(mlmd,aes(x=variable,y=value)) +geom_violin() +facet_wrap(~group)
ggplot(mlmd,aes(x=variable,y=log(value))) +geom_violin() +facet_wrap(~group,scales = 'free')
ggplot(mlmd,aes(x=variable,y=log(value))) +geom_violin() +facet_wrap(~group)+theme(axis.text.y = element_text(angle=90))
ggplot(mlmd,aes(x=variable,y=log(value))) +geom_violin() +facet_wrap(~group)+theme(axis.text.x = element_text(angle=90))
ggplot(mlmd,aes(x=variable,y=log(value))) +geom_violin() +facet_wrap(~group)+theme(axis.text.x = element_text(angle=45))
unique(as.numeric(lmd0.3$group))
sum(as.numeric(lmd0.3$group)==5)
lmd0.3[(as.numeric(lmd0.3$group)==5),]
x=minlambda[6656,]
tmp <- 0.3/x[3]
idx <- which.min(abs(as.numeric(tmp)-c(1,2,10,100,1000))) ## idx that is closest to tmp
c(x[c(1,2,4)],x[3]*(c(1,2,10,100,1000)[idx]) ,x[idx+3])
tmp
idx
x
lmd0.3 <- apply(minlambda,1,function(x){
if (x[10] != 0){
c(x[c(1,2,4)],0.3,x[10])
}else{
tmp <- 0.3/x[3]
idx <- which.min(abs(as.numeric(tmp)-c(1,2,10,100,1000))) ## idx that is closest to tmp
c(x[c(1,2,4)],x[3]*(c(1,2,10,100,1000)[idx]) ,x[idx+4])
}
})
lmd0.3 <- as.data.frame(t(lmd0.3))
lmd0.3$group <- cut(as.numeric(lmd0.3$V4),c(0,50,500,1000,2000,5000,10000))
cols <- c(6)
lmd0.3[,-cols] <- apply(lmd0.3[,-cols],2,function(x) as.character(x))
colnames(lmd0.3)[-cols] <- c('series','array','originalsegments','lambda','newsegment')
mlmd <- melt(lmd0.3,id.vars = c('series','array','lambda','group'))
mlmd$value <- as.numeric(mlmd$value)
ggplot(mlmd,aes(x=variable,y=log(value))) +geom_violin() +facet_wrap(~group)+theme(axis.text.x = element_text(angle=45))
x
c(x[c(1,2,4)],x[3]*(c(1,2,10,100,1000)[idx]) ,x[idx+4])
tmp <- 0.3/x[3]
tmp
idx <- which.min(abs(as.numeric(tmp)-c(1,2,10,100,1000))) ## idx that is closest to tmp
c(x[c(1,2,4)],x[3]*(c(1,2,10,100,1000)[idx]) ,x[idx+4])
mlmd[6656,]
lmd0.3[6656,]
x
x[10]
x[10]==0
tmp
idx
c(x[c(1,2,4)],x[3]*(c(1,2,10,100,1000)[idx]) ,x[idx+4])
apply(minlambda[6656,],1,function(x){
if (x[10] != 0){
c(x[c(1,2,4)],0.3,x[10])
}else{
tmp <- 0.3/x[3]
idx <- which.min(abs(as.numeric(tmp)-c(1,2,10,100,1000))) ## idx that is closest to tmp
c(x[c(1,2,4)],x[3]*(c(1,2,10,100,1000)[idx]) ,x[idx+4])
}
})
x[3]
0.3/x[3]
apply(minlambda[6656,],1,function(x){
if (x[10] != 0){
c(x[c(1,2,4)],0.3,x[10])
}else{
tmp <- 0.3/x[3]
idx <- which.min(abs(as.numeric(tmp)-c(1,2,10,100,1000))) ## idx that is closest to tmp
c(x[c(1,2,4)],x[3]*(c(1,2,10,100,1000)[idx]) ,x[idx+4])
}
})
apply(minlambda[6656,],1,function(x){
if (x[10] != 0){
c(x[c(1,2,4)],0.3,x[10])
}else{
tmp <- as.numeric(0.3/x[3])
idx <- which.min(abs(as.numeric(tmp)-c(1,2,10,100,1000))) ## idx that is closest to tmp
c(x[c(1,2,4)],x[3]*(c(1,2,10,100,1000)[idx]) ,x[idx+4])
}
})
apply(minlambda[6656,],1,function(x){
if (x[10] != 0){
c(x[c(1,2,4)],0.3,x[10])
}else{
tmp <- 0.3/as.numeric(x[3])
idx <- which.min(abs(as.numeric(tmp)-c(1,2,10,100,1000))) ## idx that is closest to tmp
c(x[c(1,2,4)],x[3]*(c(1,2,10,100,1000)[idx]) ,x[idx+4])
}
})
apply(minlambda[6656,],1,function(x){
if (x[10] != 0){
c(x[c(1,2,4)],0.3,x[10])
}else{
tmp <- 0.3/as.numeric(x[3])
idx <- which.min(abs(as.numeric(tmp)-c(1,2,10,100,1000))) ## idx that is closest to tmp
c(x[c(1,2,4)],as.numeric(x[3])*(c(1,2,10,100,1000)[idx]) ,x[idx+4])
}
})
lmd0.3 <- apply(minlambda,1,function(x){
if (x[10] != 0){
c(x[c(1,2,4)],0.3,x[10])
}else{
tmp <- 0.3/x[3]
idx <- which.min(abs(as.numeric(tmp)-c(1,2,10,100,1000))) ## idx that is closest to tmp
c(x[c(1,2,4)],x[3]*(c(1,2,10,100,1000)[idx]) ,x[idx+4])
}
})
lmd0.3 <- apply(minlambda,1,function(x){
if (x[10] != 0){
c(x[c(1,2,4)],0.3,x[10])
}else{
tmp <- 0.3/as.numeric(x[3])
idx <- which.min(abs(as.numeric(tmp)-c(1,2,10,100,1000))) ## idx that is closest to tmp
c(x[c(1,2,4)],as.numeric(x[3])*(c(1,2,10,100,1000)[idx]) ,x[idx+4])
}
})
lmd0.3 <- as.data.frame(t(lmd0.3))
lmd0.3$group <- cut(as.numeric(lmd0.3$V4),c(0,50,500,1000,2000,5000,10000))
cols <- c(6)
lmd0.3[,-cols] <- apply(lmd0.3[,-cols],2,function(x) as.character(x))
colnames(lmd0.3)[-cols] <- c('series','array','originalsegments','lambda','newsegment')
mlmd <- melt(lmd0.3,id.vars = c('series','array','lambda','group'))
mlmd$value <- as.numeric(mlmd$value)
ggplot(mlmd,aes(x=variable,y=log(value))) +geom_violin() +facet_wrap(~group)+theme(axis.text.x = element_text(angle=45))
lmd0.3[6656,]
apply(minlambda[6656,],1,function(x){
if (x[10] != 0){
c(x[c(1,2,4)],0.3,x[10])
}else{
tmp <- 0.3/as.numeric(x[3])
idx <- which.min(abs(as.numeric(tmp)-c(1,2,10,100,1000))) ## idx that is closest to tmp
c(x[c(1,2,4)],as.numeric(x[3])*(c(1,2,10,100,1000)[idx]) ,x[idx+4])
}
})
apply(minlambda[6656:6658,],1,function(x){
if (x[10] != 0){
c(x[c(1,2,4)],0.3,x[10])
}else{
tmp <- 0.3/as.numeric(x[3])
idx <- which.min(abs(as.numeric(tmp)-c(1,2,10,100,1000))) ## idx that is closest to tmp
c(x[c(1,2,4)],as.numeric(x[3])*(c(1,2,10,100,1000)[idx]) ,x[idx+4])
}
})
apply(minlambda[6656:6658,],1,function(x){
if (as.numeric(x[10]) != 0){
c(x[c(1,2,4)],0.3,x[10])
}else{
tmp <- 0.3/as.numeric(x[3])
idx <- which.min(abs(as.numeric(tmp)-c(1,2,10,100,1000))) ## idx that is closest to tmp
c(x[c(1,2,4)],as.numeric(x[3])*(c(1,2,10,100,1000)[idx]) ,x[idx+4])
}
})
lmd0.3 <- apply(minlambda,1,function(x){
if (as.numeric(x[10]) != 0){
c(x[c(1,2,4)],0.3,x[10])
}else{
tmp <- 0.3/as.numeric(x[3])
idx <- which.min(abs(as.numeric(tmp)-c(1,2,10,100,1000))) ## idx that is closest to tmp
c(x[c(1,2,4)],as.numeric(x[3])*(c(1,2,10,100,1000)[idx]) ,x[idx+4])
}
})
lmd0.3 <- as.data.frame(t(lmd0.3))
lmd0.3$group <- cut(as.numeric(lmd0.3$V4),c(0,50,500,1000,2000,5000,10000))
cols <- c(6)
lmd0.3[,-cols] <- apply(lmd0.3[,-cols],2,function(x) as.character(x))
colnames(lmd0.3)[-cols] <- c('series','array','originalsegments','lambda','newsegment')
mlmd <- melt(lmd0.3,id.vars = c('series','array','lambda','group'))
mlmd$value <- as.numeric(mlmd$value)
ggplot(mlmd,aes(x=variable,y=log(value))) +geom_violin() +facet_wrap(~group)+theme(axis.text.x = element_text(angle=45))
apply(minlambda[6656:6658,],1,function(x){
if (as.numeric(x[10]) != 0){
c(x[c(1,2,4)],0.3,x[10])
}else{
tmp <- 0.3/as.numeric(x[3])
idx <- which.min(abs(as.numeric(tmp)-c(1,2,10,100,1000))) ## idx that is closest to tmp
c(x[c(1,2,4)],as.numeric(x[3])*(c(1,2,10,100,1000)[idx]) ,x[idx+4])
}
})
lmd0.3 <- apply(minlambda,1,function(x){
if (as.numeric(x[10]) != 0){
c(x[c(1,2,4)],0.3,x[10])
}else{
tmp <- 0.3/as.numeric(x[3])
idx <- which.min(abs(as.numeric(tmp)-c(1,2,10,100,1000))) ## idx that is closest to tmp
c(x[c(1,2,4)],as.numeric(x[3])*(c(1,2,10,100,1000)[idx]) ,x[idx+4])
}
})
lmd0.3 <- as.data.frame(t(lmd0.3))
lmd0.3$group <- cut(as.numeric(lmd0.3$V4),c(0,50,500,1000,2000,5000,10000))
cols <- c(6)
lmd0.3[,-cols] <- apply(lmd0.3[,-cols],2,function(x) as.character(x))
colnames(lmd0.3)[-cols] <- c('series','array','originalsegments','lambda','newsegment')
mlmd <- melt(lmd0.3,id.vars = c('series','array','lambda','group'))
mlmd$value <- as.numeric(mlmd$value)
ggplot(mlmd,aes(x=variable,y=log(value))) +geom_violin() +facet_wrap(~group)+theme(axis.text.x = element_text(angle=45))
lmd0.3 <- apply(minlambda,1,function(x){
if (as.numeric(x[10]) != 0){
c(x[c(1,2,4)],0.3,x[10])
}else{
tmp <- 0.3/as.numeric(x[3])
idx <- which.min(abs(as.numeric(tmp)-c(1,2,10,100,1000))) ## idx that is closest to tmp
c(x[c(1,2,4)],as.numeric(x[3])*(c(1,2,10,100,1000)[idx]) ,x[idx+4])
}
})
lmd0.3 <- as.data.frame(t(lmd0.3))
lmd0.3$group <- cut(as.numeric(lmd0.3$V4),c(0,50,500,1000,2000,5000,10000))
cols <- c(6)
lmd0.3[,-cols] <- apply(lmd0.3[,-cols],2,function(x) as.character(x))
colnames(lmd0.3)[-cols] <- c('series','array','originalsegments','lambda','newsegment')
mlmd <- melt(lmd0.3,id.vars = c('series','array','lambda','group'))
mlmd$value <- as.numeric(mlmd$value)
ggplot(mlmd,aes(x=variable,y=log(value))) +geom_violin() +facet_wrap(~group)+theme(axis.text.x = element_text(angle=45))
levels(mlmd$group)
unique(mlmd$group)
lmd0.3$group <- cut(as.numeric(lmd0.3$V4),c(0,50,500,1000,2000,5000,10000))
lmd0.3 <- apply(minlambda,1,function(x){
if (as.numeric(x[10]) != 0){
c(x[c(1,2,4)],0.3,x[10])
}else{
tmp <- 0.3/as.numeric(x[3])
idx <- which.min(abs(as.numeric(tmp)-c(1,2,10,100,1000))) ## idx that is closest to tmp
c(x[c(1,2,4)],as.numeric(x[3])*(c(1,2,10,100,1000)[idx]) ,x[idx+4])
}
})
lmd0.3 <- as.data.frame(t(lmd0.3))
lmd0.3$group <- cut(as.numeric(lmd0.3$V4),c(0,50,500,1000,2000,5000,10000))
unique(lmd0.3$group)
c(x[c(1,2,4)],as.numeric(x[3])*(c(1,2,10,100,1000)[idx]) ,x[idx+4])
lmd0.3 <- apply(minlambda,1,function(x){
if (as.numeric(x[10]) != 0){
c(x[c(1,2,4)],0.3,x[10])
}else{
tmp <- 0.3/as.numeric(x[3])
idx <- which.min(abs(as.numeric(tmp)-c(1,2,10,100,1000))) ## idx that is closest to tmp
c(x[c(1,2,4)],as.numeric(x[3])*(c(1,2,10,100,1000)[idx]) ,x[idx+4])
}
})
lmd0.3 <- as.data.frame(t(lmd0.3))
lmd0.3$group <- cut(as.numeric(lmd0.3$V3),c(0,50,500,1000,2000,5000,10000))
View(lmd0.3)
cols <- c(6)
lmd0.3[,-cols] <- apply(lmd0.3[,-cols],2,function(x) as.character(x))
colnames(lmd0.3)[-cols] <- c('series','array','originalsegments','lambda','newsegment')
mlmd <- melt(lmd0.3,id.vars = c('series','array','lambda','group'))
mlmd$value <- as.numeric(mlmd$value)
ggplot(mlmd,aes(x=variable,y=log(value))) +geom_violin() +facet_wrap(~group)+theme(axis.text.x = element_text(angle=45))
View(lmd0.3)
lmd0.3$quality <- quality$Good_Poor[match(quality$Sample,lmd0.3$array)]
mlmd <- melt(lmd0.3,id.vars = c('series','array','lambda','group','quality'))
lmd0.3$quality <- quality$Good_Poor[match(lmd0.3$array,quality$Sample)]
mlmd <- melt(lmd0.3,id.vars = c('series','array','lambda','group','quality'))
mlmd$value <- as.numeric(mlmd$value)
ggplot(mlmd,aes(x=variable,y=log(value))) +geom_violin() +facet_wrap(~group)+theme(axis.text.x = element_text(angle=45))
ggplot(mlmd,aes(x=variable,y=log(value))) +geom_violin() +facet_wrap(quality~group)+theme(axis.text.x = element_text(angle=45))
ggplot(mlmd,aes(x=variable,y=log(value))) +geom_violin() +facet_grid(quality~group)+theme(axis.text.x = element_text(angle=45))
table(lmd0.3$quality)
table(lmd0.3$group)
lmd0.3$group <- cut(as.numeric(lmd0.3[,3]),c(0,50,500,1000,2000,5000,10000))
lmd0.3$group <- cut(as.numeric(lmd0.3[,3]),c(0,50,500,1000,2000,5000,10000,100000))
mlmd <- melt(lmd0.3,id.vars = c('series','array','lambda','group','quality'))
mlmd$value <- as.numeric(mlmd$value)
ggplot(mlmd,aes(x=variable,y=log(value))) +geom_violin() +facet_grid(quality~group)+theme(axis.text.x = element_text(angle=45))
mlmd <- melt(lmd0.3,id.vars = c('series','array','lambda','group','quality'),value.name = 'No.segments')
mlmd$value <- as.numeric(mlmd$value)
mlmd$No.segments <- as.numeric(mlmd$No.segments)
ggplot(mlmd,aes(x=variable,y=log(value))) +geom_violin() +facet_grid(quality~group)+theme(axis.text.x = element_text(angle=45))
ggplot(mlmd,aes(x=variable,y=log(No.segments))) +geom_violin() +facet_grid(quality~group)+theme(axis.text.x = element_text(angle=45))
ggplot(mlmd,aes(x=variable,y=log(No.segments))) +geom_violin() +facet_grid(quality~group)+theme(axis.text.x = element_text(angle=45),axis.title.x = element_blank())
colnames(lmd0.3)[-cols] <- c('series','array','original','lambda','new')
colnames(lmd0.3)[8]<-'quality'
colnames(lmd0.3)[7]<-'quality'
mlmd <- melt(lmd0.3,id.vars = c('series','array','lambda','group','quality'),value.name = 'No.segments')
mlmd$No.segments <- as.numeric(mlmd$No.segments)
ggplot(mlmd,aes(x=variable,y=log(No.segments))) +geom_violin() +facet_grid(quality~group)+theme(axis.text.x = element_text(angle=45),axis.title.x = element_blank())
ggplot(mlmd[mlmd$lambda=='0.3'],aes(x=variable,y=log(No.segments))) +geom_violin() +facet_grid(quality~group)+theme(axis.text.x = element_text(angle=45),axis.title.x = element_blank())
ggplot(mlmd[mlmd$lambda=='0.3',],aes(x=variable,y=log(No.segments))) +geom_violin() +facet_grid(quality~group)+theme(axis.text.x = element_text(angle=45),axis.title.x = element_blank())
boxplot(lmd0.3$lambda)
boxplot(as.numeric(lmd0.3$lambda))
hist(minlambda$V3)
max(minlambda$V3)
boxplot(lmd0.3$original/lmd0.3$new)
boxplot(as.numeric(lmd0.3$original)/as.numeric(lmd0.3$new))
hist(as.numeric(lmd0.3$original)/as.numeric(lmd0.3$new))
order(as.numeric(lmd0.3$original)/as.numeric(lmd0.3$new))[1:6]
lmd0.3[33417,]
order(as.numeric(lmd0.3$original)/as.numeric(lmd0.3$new),decreasing = T)[1:6]
lmd0.3[37997,]
(as.numeric(lmd0.3$original)/as.numeric(lmd0.3$new)>20)[1:5]
which(as.numeric(lmd0.3$original)/as.numeric(lmd0.3$new)>20)[1:5]
lmd0.3[38,]
idx=as.numeric(lmd0.3$group)>1
boxplot(as.numeric(lmd0.3$original)[idx]/as.numeric(lmd0.3$new)[idx])
as.numeric(lmd0.3$group)
as.numeric(lmd0.3$group)>1
idx=as.numeric(lmd0.3$group)>2
boxplot(as.numeric(lmd0.3$original)[idx]/as.numeric(lmd0.3$new)[idx])
ggplot(mlmd,aes(x=variable,y=log(No.segments))) +geom_violin() +facet_grid(quality~group)+theme(axis.text.x = element_text(angle=45),axis.title.x = element_blank())
lmd0.3$group <- cut(as.numeric(lmd0.3[,3]),c(0,200,500,1000,2000,5000,10000,100000))
mlmd <- melt(lmd0.3,id.vars = c('series','array','lambda','group','quality'),value.name = 'No.segments')
mlmd$No.segments <- as.numeric(mlmd$No.segments)
ggplot(mlmd,aes(x=variable,y=log(No.segments))) +geom_violin() +facet_grid(quality~group)+theme(axis.text.x = element_text(angle=45),axis.title.x = element_blank())
ggplot(mlmd[mlmd$lambda=='0.3',],aes(x=variable,y=log(No.segments))) +geom_violin() +facet_grid(quality~group)+theme(axis.text.x = element_text(angle=45),axis.title.x = element_blank())
